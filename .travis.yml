# workaround
language: generic

# tell travis CI that superadmin is required
sudo: required

# STEP 1:
# tell travis CI you need a copy of docker
services:
    - docker

# STEP 2:
# tell travis to build image using Dockerfile.dev
before_install:
    - docker build -t kidobi/docker-react -f Dockerfile.dev .

# STEP 3:
# tell travis how to run test suite
# NOTE: run command is slightly different. have to use -e to set environment variable
# CI=true so that test runs and exits non-interactively
script:
    - docker run -e CI=true kidobi/docker-react npm run test

# STEP 4: tell travis how to deploy our code to AWS
deploy:
    # Travis CI is pre-configured to support a lot of common providers
    provider: elasticbeanstalk

    # elasticbeanstalk environment details
    region: "ca-central-1"
    app: "charlie-docker-react-test"
    environmentname: "CharlieDockerReactTest-env-1"
    bucket_name: "elasticbeanstalk-ca-central-1-403263076102"
    bucket_path: "charlie-docker-react-test"
    
    # only deploy if commits are made to the master branch in github
    on:
        branch: master
    
    # AWS API Keys: environment variables defined in Travis CI dashboard settings
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY